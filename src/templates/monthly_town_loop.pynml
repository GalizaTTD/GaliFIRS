<!--! monthly callback is used to influence town behaviour depending on cargo delivered
      currently included with production behaviour template as it's closely related -->
switch(FEAT_INDUSTRIES, SELF, count_industries_in_town,
    [
        <tal:industries_in_town repeat="industry registered_industries">
            industry_town_count(${industry.numeric_id}) +
        </tal:industries_in_town>
        1 <!--! seems industry_town_count filters out current instance so add 1? -->
    ]) {
    return;
}

<!--! probably not needed - delete (and caller)?
      just to prove whether monthly_town_loop() is being called from different industry classes -->
<!--!
switch(FEAT_INDUSTRIES, SELF, increment_town_monthly_cycle_industry_counter_debug, town_cycle_industry_counter,
    [
        STORE_PERM(
            town_cycle_industry_counter,
            230
        ),
        STORE_PERM(
            1,
            231
        )
    ]) {
    return;
}
-->

switch(FEAT_INDUSTRIES, PARENT, increment_town_monthly_cycle_industry_counter,
    [
        STORE_PERM(
            LOAD_PERM(${get_perm_num("this_cycle_industry_counter")}) + 1,
            ${get_perm_num("this_cycle_industry_counter")}
        )
        <!--!,
        increment_town_monthly_cycle_industry_counter_debug(LOAD_PERM(${get_perm_num("this_cycle_industry_counter")}))-->
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, PARENT, reset_town_monthly_cycle_industry_counter,
    [
        STORE_PERM(
            0,
            ${get_perm_num("this_cycle_industry_counter")}
        )
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, PARENT, rollover_next_and_current_optimism_scores,
    [
        STORE_PERM(
            LOAD_PERM(${get_perm_num("next_basic_needs_and_luxuries_score")}),
            ${get_perm_num("current_basic_needs_and_luxuries_score")}
        )
        ,
        STORE_PERM(
            0,
            ${get_perm_num("next_basic_needs_and_luxuries_score")}
        ),
        STORE_PERM(
            LOAD_PERM(${get_perm_num("next_pollution_and_squalor_score")}),
            ${get_perm_num("current_pollution_and_squalor_score")}
        )
        ,
        STORE_PERM(
            0,
            ${get_perm_num("next_pollution_and_squalor_score")}
        ),
        <!--! current_optimism_score calculated from bnal and pas scores -->
        STORE_PERM(
            LOAD_PERM(${get_perm_num("current_basic_needs_and_luxuries_score")}) - LOAD_PERM(${get_perm_num("current_pollution_and_squalor_score")}),
            ${get_perm_num("current_optimism_score")}
        )
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, PARENT, town_monthly_cycle_complete,
    [
        rollover_next_and_current_optimism_scores(),
        reset_town_monthly_cycle_industry_counter()
    ]) {
    return 1;
}

switch(FEAT_INDUSTRIES, PARENT, check_if_town_monthly_cycle_complete,
    [
        LOAD_PERM(${get_perm_num("this_cycle_industry_counter")}) == count_industries_in_town()
    ]) {
    1: return town_monthly_cycle_complete;
    return 0;
}

switch(FEAT_INDUSTRIES, PARENT, contribute_to_town_optimism, basic_needs_and_luxuries_score, pollution_and_squalor_score,
    [
        STORE_PERM(
            LOAD_PERM(${get_perm_num("next_basic_needs_and_luxuries_score")}) + basic_needs_and_luxuries_score,
            ${get_perm_num("next_basic_needs_and_luxuries_score")}
        ),
        <!--! pollution_and_squalor_score expressed as +ve integer, avoids issues where procedures return 15 bit values, dropping the signed bit on -ve numbers -->
        STORE_PERM(
            LOAD_PERM(${get_perm_num("next_pollution_and_squalor_score")}) + pollution_and_squalor_score,
            ${get_perm_num("next_pollution_and_squalor_score")}
        ),
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, PARENT, monthly_town_loop_enabled, basic_needs_and_luxuries_score, pollution_and_squalor_score,
    [
        contribute_to_town_optimism(basic_needs_and_luxuries_score, pollution_and_squalor_score),
        increment_town_monthly_cycle_industry_counter(),
        STORE_PERM(
            count_industries_in_town(),
            ${get_perm_num("town_industry_count_for_debugging")}
        ),
        check_if_town_monthly_cycle_complete(),
    ]) {
    return;
}

<!--! wrapper for experimental features on/off -->
switch(FEAT_INDUSTRIES, PARENT, monthly_town_loop, basic_needs_and_luxuries_score, pollution_and_squalor_score, experimental_features) {
    1: monthly_town_loop_enabled(basic_needs_and_luxuries_score, pollution_and_squalor_score);
    return;
}

