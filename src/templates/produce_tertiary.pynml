<!--!
    Tertiary production behaviour.
    Black hole for any delivered cargo.
    Delivered cargo may affect population optimism in this town.
    Optional cargo production on 256 tick callback, similar to primary.
-->

<!--! get the total amount of supplies delivered in last 27 production cycles -->
switch(FEAT_INDUSTRIES, SELF, ${industry.id}_produce_total_input_cargo_delivered,
    [
    <tal:total_supplies repeat="var_num range(1, 28)">
        LOAD_PERM(${get_perm_num("input_cargo_delivered_" + str(var_num))})
        ${'+' if not repeat.var_num.end else ''}
    </tal:total_supplies>
    ]) {
    return;
}

<tal:economies repeat="economy industry.economies_enabled_for_industry">
    <!--!
        Handle produce 256 tick callback.
        Always handled to update recent deliveries (affects population optimism score).
        Optionally also produce for industries that have production
    -->
    <tal:has_production switch="industry.has_production">
        <tal:case case="True">
            produce(${industry.id}_produce_256_ticks_economy_${economy.numeric_id},
                [<!--! no accept in 256 cb -->],
                [
                    <tal:produce repeat="cargo industry.get_prod_cargo_types(economy)">
                        <!--!
                              simply replicates default ottd prod. algorithm but in prod. cb, so action 0 prod. properties can be set 0
                              prod. cb is used consistently in FIRS, to reduce the number of different prod. methods in use
                              calculation is (cargo amount * production_level * base_prod_factor) / (default production_level * default base_prod_factor)
                              base_prod_factor is randomised at start (default 16), so that production_level can be used separately for cheats and monthly/random prod changes
                        -->
                        ${cargo[0]}: (${cargo[1]} * production_level * LOAD_PERM(${get_perm_num("base_prod_factor")})) / (16 * 16);
                    </tal:produce>
                ],
            0)
        </tal:case>
        <tal:case case="False">
            produce(${industry.id}_produce_256_ticks_economy_${economy.numeric_id},
                [<!--! no accept in 256 cb -->],
                [<!--! no product in 256 cb -->],
            0)
        </tal:case>
    </tal:has_production>

    <!--!
        Handle produce on cargo arrival.
        Push the amount to perm storage, and update supplied cycles counter (used for population optimism score).
        Then clear cargo from stockpile.
    -->
    produce (${industry.id}_produce_cargo_arrival_economy_${economy.numeric_id},
        [
            <tal:subtract repeat="cargo industry.get_property('accept_cargo_types', economy)">
                ${cargo}: incoming_cargo_waiting("${cargo}");
            </tal:subtract>
        ],
        [<!--! no production when cargo arrives -->],
    0)

    switch(FEAT_INDUSTRIES, SELF, ${industry.id}_store_incoming_cargo_waiting_${economy.numeric_id},
        [
            STORE_PERM_ALT(
                ${get_perm_num("input_cargo_delivered_27")},
                <tal:store repeat="cargo industry.get_accept_cargo_types(economy)">
                    incoming_cargo_waiting("${cargo}") +
                </tal:store>
                LOAD_PERM(${get_perm_num("input_cargo_delivered_27")})
            ),
            <!--! check if each cargo is delivered in this cycle, and if so reset the supplied cycles remaining
                  NOTE next cycle will -1 so store 28 so we get 27 cycles in total
                  this will cause the industry 'supplied' text to show immediately -->
            <tal:input_cargos repeat="cargo industry.get_accept_cargo_types(economy)">
                STORE_PERM_ALT(
                    ${get_perm_num("supplied_cycles_remaining_cargo_" + str(repeat.cargo.number))},
                    (incoming_cargo_waiting("${cargo}") > 0)
                    ?
                    28
                    :
                    LOAD_PERM(${get_perm_num("supplied_cycles_remaining_cargo_" + str(repeat.cargo.number))})
                ),
            </tal:input_cargos>
        ]) {
        ${industry.id}_produce_cargo_arrival_economy_${economy.numeric_id};
    }

</tal:economies>

switch (FEAT_INDUSTRIES, SELF, ${industry.id}_produce_cargo_arrival, economy) {
    <tal:economies repeat="economy industry.economies_enabled_for_industry">
        ${economy.numeric_id}: ${industry.id}_store_incoming_cargo_waiting_${economy.numeric_id};
    </tal:economies>
}

switch (FEAT_INDUSTRIES, SELF, ${industry.id}_produce_256_ticks_switch_economy, economy) {
<tal:economies repeat="economy industry.economies_enabled_for_industry">
    ${economy.numeric_id}: ${industry.id}_produce_256_ticks_economy_${economy.numeric_id};
</tal:economies>
}

<!--! set the number of supplied cycles remaining per cargo - used to display 'supplied' (or not) in the industry window -->
switch(FEAT_INDUSTRIES, SELF, ${industry.id}_update_supplied_cycles_remaining_per_cargo,
    [
        <tal:cargos repeat="cargo_num range(1, 9)">
            <!--! check if each cargo is delivered, and if so update the cycles remaining flag for that to 27,
                  otherwise reduce the number of cycles remaining by 1
                  cap minimum value to 0, avoid -ve values that might overflow eventually -->
            STORE_PERM_ALT(
                ${get_perm_num("supplied_cycles_remaining_cargo_" + str(cargo_num))},
                max(
                    0,
                    LOAD_PERM(${get_perm_num("supplied_cycles_remaining_cargo_" + str(cargo_num))})
                    - 1
                )
            ),
        </tal:cargos>
    ]) {
    return 0;
}

<!--! shift the array of supplies_delivered values one place to the left, and zero the last entry -->
switch(FEAT_INDUSTRIES, SELF, ${industry.id}_produce_256_ticks_shift_supplies_delivered,
    [
        <tal:shift_supplies repeat="var_num range(1, 27)">
            STORE_PERM_ALT(
                ${get_perm_num("input_cargo_delivered_" + str(var_num))},
                LOAD_PERM(${get_perm_num("input_cargo_delivered_" + str(var_num + 1))}),
            ),
        </tal:shift_supplies>
        STORE_PERM_ALT(${get_perm_num("input_cargo_delivered_27")}, 0)
    ]) {
    return 0;
}

switch(FEAT_INDUSTRIES, SELF, ${industry.id}_produce_256_ticks,
    [
        <!--! there is a good chance that the order of operations here introduces an obiwan on the 27 cycles
              but it _seems_ to work and I don't think it matters enough to figure it out with pen and paper -->
        ${industry.id}_update_supplied_cycles_remaining_per_cargo(),
        ${industry.id}_produce_256_ticks_shift_supplies_delivered(),
    ]) {
    ${industry.id}_produce_256_ticks_switch_economy;
}
<!--! end production behaviour -->


<!--! called from monthly 'town' loop (actually monthly industry loop)
      *all* industries must handle monthly_town_loop, or town behaviour will fail on wrong industry counts -->
switch(FEAT_INDUSTRIES, SELF, ${industry.id}_calculate_town_optimism_contribution,
    [
        <!--! !! 8 seems more natural, 10 was just for testing -->
        <!--! ${industry.id}_produce_total_input_cargo_delivered() >= 80 ? 8 : 0 -->
        ${industry.id}_produce_total_input_cargo_delivered() >= 80 ? 10 : 0
    ]) {
    return;
}

switch(FEAT_INDUSTRIES, SELF, ${industry.id}_monthly_prod_change,
    [
        monthly_town_loop(
            ${industry.id}_calculate_town_optimism_contribution(),
            ${industry.pollution_and_squalor_score}
        )
    ]) {
    return CB_RESULT_IND_PROD_NO_CHANGE;
}
<!--! end from monthly 'town' loop (actually monthly industry loop) -->
